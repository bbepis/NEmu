using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;

namespace NEmu.Chip8
{
	public class Memory
	{
		public byte DelayTimer, SoundTimer;
		public byte[] Registers = new byte[16];
		public ushort I, PC;

		public bool GraphicsDirtied = false;

		public Stack<ushort> CallStack;

		public readonly byte[] RAM = new byte[4096];
		public readonly byte[] VRAM = new byte[256];

		public void Initialize()
		{
			for (int i = 0; i < 16; i++)
				Registers[i] = 0;

			DelayTimer = SoundTimer = 0;
			I = 0;
			PC = 0x200;

			CallStack = new Stack<ushort>(16);

			for (int i = 0; i < 4096; i++)
				RAM[i] = 0;
			for (int i = 0; i < 256; i++)
				VRAM[i] = 0;

			byte[] fontData =
			{
				0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
				0x20, 0x60, 0x20, 0x20, 0x70, // 1
				0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
				0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
				0x90, 0x90, 0xF0, 0x10, 0x10, // 4
				0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
				0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
				0xF0, 0x10, 0x20, 0x40, 0x40, // 7
				0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
				0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
				0xF0, 0x90, 0xF0, 0x90, 0x90, // A
				0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
				0xF0, 0x80, 0x80, 0x80, 0xF0, // C
				0xE0, 0x90, 0x90, 0x90, 0xE0, // D
				0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
				0xF0, 0x80, 0xF0, 0x80, 0x80  // F
			};

			fontData.AsSpan().CopyTo(RAM.AsSpan(0x50));
		}

		public void LoadRom(byte[] rom)
		{
			rom.AsSpan().CopyTo(RAM.AsSpan(0x200));
		}
	}
}